REACT NOTES:

Node.js 

npm =node package manager npmjs.com find JS packages CLI=Common Line Interface

         2 terminals for windows (CMD and Powershell *Powershell is error prone) 

         Check Node version in terminal:    node --version
        <!-- space is important -->

        clear screen prompt (Windows = cls)(Apple = clear) 
        
        
        React is a JS library created by Facebook builds fast and interactive user interfaces.   Front end technologies. React is a piece of the UI it's
        independent, isolated, and reusable components are the building blocks 
        
        Root Components: App.js (script.js for me) 
        Every React app is basicially a  Component tree
        
        pwd for apple equals Project Word Directory
        
        To launch project, type:   npm start (NPM = Node Project Manager)

        To launch BOOTSTRAP, type: npm install BOOTSTRAP (before starting project in cmd prompt)
            Then import BOOTSTRAP into top of App.js page   
                You can find the path under node_modules
                    import "bootstrap/dist/css/bootstrap.min.css";
                    import "bootstrap/dist/js/bootstrap.min.js";


                    
    ***Installing React RouterReact Router DOM is an npm package that enables you to implement dynamic routing in a web app. It allows you to display pages and allow users to navigate them. It is a fully-featured client and server-side routing library for React:  ***

    npm install react-router-dom -s

        ***import into top of App.js page***
            import { BrowserRouter, Routes, Route } from 'react-router-dom';


Wrapper components grab componets and elements and provides functionality but wont' display anything on the screen.   Functionality without looks    

<Routes>
            <Route path="/" element={<Home />} ></Route>
            <Route path="/home" element={<Home />} ></Route>
            <Route path="/catalog" element={<Catalog />}></Route>
            <Route path="/contact" element={<Contact />}></Route>
            <Route path="/cart" element={<Cart />}></Route>
</Routes>


***Homework 
    State Management on Front End 

        CTRL+C stops everything

        HTML inside a JS file on REACT is actually  .JSX

        In HTML class= is className=

        everthing has to be closed even inputs </input>

        Use .jsx for all components inside a react file
        files names start with lowercase

        all html elements inside a react file must be lowercase

        REACT Functions must start with uppercase

        Importing css files: import "./file.css";

        file explorer go to project then click on path then type "cmd"


EVERY COMPONENT NEEDS
        // 1 import .css (make it now if not done)
        // 2. create function with Capitalized name 
        // 3 used Divs and create classes
        // 4 export default

curly braces inside js acts as "instruction mode"
React doesnt usually use variables like "let" or "var"


"STATE VARIABLES" are immutable (can't change the valuable)
const [quantity, setQuantity] = useState(1);



CTRL+Click while hovering goes to the named FUNCTION

CTRL+P jumps to recently used files within working folder

To launch Command Center (find files fast) right click name of main folder at top then select Command Center  

Random photo generator online: picsum.photos (no www. needed)
works like Lorem Ipsum (random word generator) but for photos

useEffect();  uses two parameters  arrow function => and list of dependencies []


ARROW FUNCTIONS:

An arrow function expression is a compact alternative to a traditional function expression, with some semantic differences and deliberate limitations in usage:

Arrow functions don't have their own bindings to this, arguments, or super, and should not be used as methods.

Arrow functions cannot be used as constructors. Calling them with new throws a TypeError. They also don't have access to the new.target keyword.

Arrow functions cannot use yield within their body and cannot be created as generator functions.

this. changes within a function will be different with an arrow function.  Need arrow function to make this. work within REACT

in JS this. will work the same with or without the arrow function.

TERMINAL shortcut ( CTRL + `  )


HANDLER EVENTS
    onChange (anytime something changes)

changed code (in case i typed something wrong)
function handleQuantityChange(qty) {
        console.log("quantity change", qty);
        
    }
<QuantityPicker onChange={handleQuantityChange} />


return div.home will auto complete to 
return <div className="home">Welcome</div>

SPA Single Page Applications are one page websites.  Quick and Simple.

Web Applications have interactive features




SAVING TO GITHUB FROM TERMINAL

1.) #create Github repository on webside and cop URL

2.) # initialize the repository
    git init

3.) # add the remote url
    git remote add origin <URL>

4.) # create a local copy
    git add .
    git commit -m "MESSAGE"

5.) # Push /upload
        # first push:
        git push -u origin master 

        # next time
        git push


Moving Lines of code.  highlight and press ALT then up/down arrows

Use Statements
const [variable,setFunction] = useState ();  be sure to import it at top of file


Solving where to put the cart array:  We have data we need to share between two non-immediately related components.

State Management solutions Redux or React Context
    
    Redux:
         Popular, can be used in JS Angular React but it is Complex
            Redux is a single source of truth

                a. Store holds the data for entire app

                b. Actions the events that occur in the app based on user input, and trigger updates in th state.

                c. Reducers are functions that will be notified when an action is dispatched and should modify the state.

    React Context 
        Belongs only to React, Easier, not suitable for multiple times per second updates.

            a. belongs to React

            b. Easier

            c. Not suitable for multiple times per second updates (limit is around
                100/second)

            d. don't overuse this, it makes the component reuse more difficult and it tends to slow down performance.


            Created a STORE file in SVC
                in STORE created dataContext file
                with DataContext function using createContext 
                with variable and functions to change them.
                then export

                created a graber globalData.jsx in store folder

                imported globalData into app.js
                wrapped entire page inside BrowerRouter inside <GlobalData> and </GlobalData> ....and webpages disappeared.
                put props inside GlobalData variable. and output the props.children

 import DataContext from './dataContext';

function GlobalData(props) {
    return (  
    <DataContext.Provider>{props.children}</DataContext.Provider>
    );
}

export default GlobalData;



addProduct to cart calls a function ouside of component inside globalData
import the dataContext and the function 


Recap
Product Component wants to store data in contents
When you click on the button it wants to change the array to add new prodcuts
but the array is an immutable object. You can't change it directly

Instead we need to have the component call a function and the function needs to update the array


the array exists on a state variable and you can't modify technologies
to change a state variable you have to call a set
       cart.push.product for example isn't allowed.
       also let copy=nums; doesn't creat a copy it just adds a name to nums variable

//modify a state variable with obj {} or []
        // create a copy, modify the copy, set the copy  Variable in example is named "copy"
spread operator =   ...

  let copy = [...cart];                          ***This creates the copy
        copy.push(product);                 ***This modifys the copy
        setCart(copy);                          ***This replaces original with copy

    function addProductToCart(product) {
        let copy = [...cart];
        copy.push(product);
        setCart(copy);
    }

    Finally, go back to where function is called and insert the props.data in this case it is around line 20 in product.jsx
            addProductToCart(props.data); //calling the global function

creating cart total in navbar
useContext (DataContext).cart;

Right now this only changes each page. Because we are using anchors <a> href
within React, change them with pagination

most state managment systems save things in variable


need to import DataContext and Import

inside cart.jsx
    we are mapping the cart data so it will display all the info on the screen
           <ul>
                {cart.map(prod) => (
                    <li>{prod.title}</li>
                )}
            </ul>


 Homework is JS Spread Operator 
 Made title component separate to play with components  